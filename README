Download

- Download the latest GUI release: https://github.com/danielclark-boop/TxEdge-JSON-CSV/releases/tag/v1.0.0

Dependencies

- Python 3.x is only required to run the raw scripts directly from source.
  - Windows: https://www.python.org/downloads/windows/
  - macOS: https://www.python.org/downloads/macos/
- The bundled executable (Windows) or app (macOS) does not require Python to be installed.


This project converts TechEx txEdge JSON files to CSV.

Using the bundled executable/app (Recommended)

- Run the application (no Python required):
  - Windows: run the packaged `txedge_gui.exe`.
  - macOS: run the packaged `txedge_gui` app/binary.
 - On first launch (and on each run), the app ensures the following site-aware structure exists in the directory it is launched from:
  - `Sites/<Site>/<Env>/StreamInfo-CSVs/`
  - `Sites/<Site>/<Env>/Input-Output-CSVs/`
- Place your TechEx JSON files inside the appropriate site+environment folder, or use the Fetch feature to pull them from Core.
- Using the GUI:
  - Select the Site (e.g., `Pico`, `Tempe`).
  - Select the Environment (`TDP`, `D2C`, or `FTS`).
  - Choose the Script:
    - "Stream Information" → outputs CSVs under `StreamInfo-CSVs/`.
    - "Input/Output" → outputs CSVs under `Input-Output-CSVs/`.
  - Pick a specific JSON file, or select "Convert ALL TechEx JSON Files" to batch process every JSON in the chosen site+environment.
  - Click "Run" to generate CSVs. A status label and progress bar indicate progress during batch conversions.
  - Click "Open Output Folder" to open the destination folder for the current site+environment/script.

Fetch from Core (Weaver)

- Configure `Scripts/site_env_config.json` with your site/env core addresses and tokens. See `Scripts/site_env_config.example.json` for structure:
  {
    "Pico": {
      "TDP": { "cores": ["https://coreA", "https://coreB", "https://coreC"], "token": "..." },
      "D2C": { "cores": ["https://coreA", "https://coreB", "https://coreC"], "token": "..." },
      "FTS": { "cores": ["https://coreA", "https://coreB", "https://coreC"], "token": "..." }
    },
    "Tempe": { ... }
  }
- The GUI "Fetch from Core" button will try each core address in order until one responds, pull all online edges for the selected site+environment, and save `<edgeName>-config.json` under `Sites/<Site>/<Env>/`.
- Notes:
  - Windows: the app hides the console window automatically.
  - macOS: launching via Finder or as an app bundle shows no terminal; launching from a shell will keep the invoking shell open.


 

Usage (raw scripts)

1) txEdge-specific converter:

  python3 Scripts/txedge_to_csv.py -i samples/txedge_sample.json -o samples/txedge_sample.csv

  Columns (in order):
  - streamName
  - Input/Output
  - name
  - protocol
  - port
  - networkInterface/hostAddress
  - sourceAddress/address
  - stopped
  - paused
  - priority

2) Streams + Sources only:

  python3 Scripts/txedge_to_csv_streams_sources.py -i samples/txedge_streams_sources_sample.json -o samples/txedge_streams_sources_sample.csv

  Columns (in order):
  - name
  - zeroBitrate
  - TSSyncLoss
  - lowBitrateThreshold
  - CCErrorsInPeriodThreshold
  - CCErrorsInPeriodTime
  - lowBitrate
  - CCErrorsInPeriod
  - failoverMode
  - failoverRevertTime
  - failoverWaitTime
  - enableThumbnails
  - priority

Samples are under `samples/`.
