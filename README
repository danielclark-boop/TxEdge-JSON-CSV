Download

- Download the latest GUI release: https://github.com/danielclark-boop/TxEdge-JSON-CSV/releases/tag/v1.0.0

Dependencies

- Python 3.x is only required to run the raw scripts directly from source.
  - Windows: https://www.python.org/downloads/windows/
  - macOS: https://www.python.org/downloads/macos/
- The bundled executable (Windows) or app (macOS) does not require Python to be installed.


This project converts TechEx txEdge JSON files to CSV.

Using the bundled executable/app (Recommended)

- Run the application (no Python required):
  - Windows: run the packaged `txedge_gui.exe`.
  - macOS: run the packaged `txedge_gui` app/binary.
- On first launch (and on each run), the app ensures the following structure exists in the directory it is launched from:
  - `TDP/StreamInfo-CSVs/`
  - `TDP/Input-Output-CSVs/`
  - `TDP/Editable CSVs/`
  - `TDP/Updated JSONs/`
  - `D2C/StreamInfo-CSVs/`
  - `D2C/Input-Output-CSVs/`
  - `D2C/Editable CSVs/`
  - `D2C/Updated JSONs/`
  - `FTS/StreamInfo-CSVs/`
  - `FTS/Input-Output-CSVs/`
  - `FTS/Editable CSVs/`
  - `FTS/Updated JSONs/`
- Place your TechEx JSON files inside the appropriate environment folder (e.g., `TDP/`, `D2C/`, or `FTS/`).
- Using the GUI:
  - Select the Environment (`TDP`, `D2C`, or `FTS`).
  - Choose the Script:
    - "Stream Information" → outputs CSVs under `StreamInfo-CSVs/`.
    - "Input/Output" → outputs CSVs under `Input-Output-CSVs/`.
    - "Create Editable CSV" → outputs full editable CSVs under `Editable CSVs/`.
    - "Convert CSV to JSON" → reads from `Editable CSVs/` and writes updated JSONs under `Updated JSONs/`.
  - Pick a specific JSON file, or select "Convert ALL TechEx JSON Files" to batch process every JSON in the chosen environment.
  - Click "Run" to generate CSVs. A status label and progress bar indicate progress during batch conversions.
  - Click "Open Output Folder" to open the destination folder for the current environment/script.
- Notes:
  - Windows: the app hides the console window automatically.
  - macOS: launching via Finder or as an app bundle shows no terminal; launching from a shell will keep the invoking shell open.


Editable CSVs workflow

- "Create Editable CSV" produces a CSV containing one row per object in the source JSON, grouped by stream:
  - Row order example: Stream row → its Source rows → its Output rows.
  - Columns are the union of all leaf keys across `configuredStreams`, `configuredSources`, and `configuredOutputs` (with duplicates merged into the same column). The heavy `state` key is excluded.
  - The CSV includes an `objectType` column (4th column) with values `Stream`, `Source`, or `Output`.
- Do not edit these columns (used to tie back to JSON correctly):
  - `id`
  - `objectType`
  - `stream`
- You may leave cells blank to indicate "no change".

Converting edited CSVs back to JSON

- Choose the "Convert CSV to JSON" script in the GUI.
  - The file picker will list CSV files from the environment's `Editable CSVs/` folder.
  - For each selected CSV, the converter finds its matching JSON in the environment root named `<csv_base>-config.json`.
  - Values are written back into the JSON by matching on the `id` column and updating keys present in the CSV (skipping the fields listed above). Types are coerced where possible (bool/int/float/JSON arrays/objects).
  - Updated files are written to the environment's `Updated JSONs/` folder.

Usage (raw scripts)

1) txEdge-specific converter (preferred for your structure):

  python3 txedge_to_csv.py -i samples/txedge_sample.json -o samples/txedge_sample.csv

  Columns (in order):
  - streamName
  - Input/Output
  - name
  - protocol
  - port
  - networkInterface/hostAddress
  - sourceAddress/address
  - stopped
  - paused
  - priority

2) Generic JSON to CSV (optional):

  python3 json_to_csv.py -i input.json -o output.csv
  python3 json_to_csv.py -i input.json -o output.csv --fields id,name,contact.email

Samples are under `samples/`.

Streams + Sources only:

  python3 txedge_to_csv_streams_sources.py -i samples/txedge_streams_sources_sample.json -o samples/txedge_streams_sources_sample.csv

  Columns (in order):
  - name
  - zeroBitrate
  - TSSyncLoss
  - lowBitrateThreshold
  - CCErrorsInPeriodThreshold
  - CCErrorsInPeriodTime
  - lowBitrate
  - CCErrorsInPeriod
  - failoverMode
  - failoverRevertTime
  - failoverWaitTime
  - enableThumbnails
  - priority

3) Create Editable CSV (all keys, grouped by stream; excludes `state`):

  python3 Scripts/txedge_to_csv_with_id.py -i TDP/example-config.json -o "TDP/Editable CSVs/example.csv"

  Notes:
  - Columns include `objectType` (4th), `id`, `stream`, and all other leaf keys. Do not edit `id`, `objectType`, or `stream`.

4) Convert CSV back to JSON:

  python3 Scripts/CSV_to_JSON.py -i "TDP/Editable CSVs/example.csv" -o "TDP/Updated JSONs/example-config.json"

  Notes:
  - Matches `<csv_base>-config.json` in the environment root as the source template; writes updated JSON to `Updated JSONs/`.
